#!/usr/bin/env python3
# -*- coding: utf-8  -*-

"""
This script creates a new givenname on Wikidata based on input.

TODO: check no item exists, with P31:202444
"""

import argparse
import json
import os
import pywikibot
import sys

# Usage: create_givenname.py [-h] givenname
parser = argparse.ArgumentParser(
    description='Creates a given name item on Wikidata.'
)
parser.add_argument(
    'givenname',
    metavar='givenname', nargs=1,
    help='the given name to create'
)
parser.add_argument(
    'genre',
    metavar='genre', nargs='?', default='D',
    help='M for a male, F for a female, U for an unisex given name',
    choices=['M', 'F', 'U', 'D']
)
args = parser.parse_args()
givenname = args.givenname[0]
genre = args.genre[0]

# Consistency check
if givenname[0].islower():
    sys.stderr.write(
        "Can't create a givenname with the first letter in lower case.\n"
    )
    sys.exit(5)

# Creates item on Wikidata
site = pywikibot.Site("wikidata", "wikidata")
repo = site.data_repository()

data = {}
result = repo.editEntity(
    {}, {},
    summary="Creating empty item for given name " + givenname
)
title = result.get('entity').get('id')
item = pywikibot.ItemPage(repo, title=title)
item.get()

genre_items = {
    'D': 'Q202444',
    'M': 'Q12308941',
    'F': 'Q11879590',
    'U': 'Q3409032'
}

l10n_files = {
    'D': 'l10n/givenname.json',
    'M': 'l10n/givenname-m.json',
    'F': 'l10n/givenname-f.json',
    'U': 'l10n/givenname-u.json'
}

script_dir = os.path.dirname(os.path.realpath(__file__))

# Gets whitelist latin languages to avoid create the element in other scripts.
latin_languages_file = os.path.join(script_dir, 'l10n/latin-whitelist.json')
with open(latin_languages_file) as data_file:
    latin_languages = json.load(data_file)

# Gets descriptions from l10n file, and fill labels for these languages.
l10n_file = os.path.join(script_dir, l10n_files[genre])
with open(l10n_file) as data_file:
    descriptions = json.load(data_file)

labels_languages = set(descriptions.keys()).intersection(latin_languages)
labels = {lang: givenname for lang in labels_languages}

item.editLabels(labels, summary='Adding given name labels')

# Instance of: "[gender] given name"
claim = pywikibot.Claim(repo, 'P31')
target = pywikibot.ItemPage(repo, genre_items[genre])
claim.setTarget(target)
item.addClaim(claim)

# Native label: <the given name>
claim = pywikibot.Claim(repo, 'P1705')
target = pywikibot.WbMonolingualText(text=givenname, language='mul')
claim.setTarget(target)
item.addClaim(claim)

# Writing system: "latin"
claim = pywikibot.Claim(repo, 'P282')
target = pywikibot.ItemPage(repo, 'Q8229')
claim.setTarget(target)
item.addClaim(claim)

item.editDescriptions(descriptions, summary='Adding given name descriptions')

print(title)
